apiVersion: apps/v1 # версия, можно посмотреть в доке кубера
kind: Deployment # cущность
metadata:
  name: backend-deployment
  # namespace: it-incubator можем так же указать для какого namespace создать
  labels:
    app: backend-pod
spec:
  #replicas: 4 # создаем 4 инстанса нашего приложения (4 пода), которыми будет управлять этот Deployment
  selector: # секлектор по которому выбираются контейнеры (поды), которыми будет управлять данный deployment
    matchLabels:
      project: backend-pod # лейблы которые мы указываем для самих подов (сущность Pod), чтобы deployment управлял ими
  template: # создаем наш под непосредственно внутри файла deployment
    metadata:
      labels:
        project: backend-pod
    spec:
      containers:
        - name: backend-pod
          image: abazuntts/k8s-back:latest # здесь указан тестовый образ, после заливки на докер хаб указать свой
          livenessProbe: # проба, которая опрашивает контейнер во время его жизнедеятельности(во время его работы), если оно перестает отвечать, то k8s перезапускает наше приложение (под)
            httpGet:
              path: /healthz
              port: 8080
            initialDelaySeconds: 5 # сколько ждет прежде чем начинает опрашивать наше приложение на готовность
            periodSeconds: 10
          readinessProbe: # проба, которая проверяет готовность нашего приложения принимать запросы, если все ок, то сервис будет отправлять трафик на этот под
            httpGet:
              path: /ready
              port: 8080
            initialDelaySeconds: 20 # сколько ждет прежде чем начинает опрашивать наше приложение на готовность
            periodSeconds: 5
          startupProbe: # проба, которая опрашивает контейнер при старте. если все не ок, тогда k8s будет пытаться перезапустить этот под (контейнер)
            httpGet:
              path: /startup # эндпойнт куда нужно постучаться чтобы проверить что все ок (прописывается на нашем сервере)
              port: 8080 # порт
            failureThreshold: 6 # количество попыток опроса
            periodSeconds: 10 # через сколько сек попытаться отправить запрос снова
          volumeMounts:
            - name: backend-config-map-file # имя которое указываем ниже в данном файле в volumes
              mountPath: /app/backend.txt # говорим куда нужно положить файл ( смонтировать) в корневую папку нашего приложения (см в докер образе в какую папку мы его переносим)
              subPath: backend.txt
              readOnly: true # только для чтения
          resources: # указываем какие ресурсы мы хотим настроить для одного инстанса приложения (одной ноды)
            requests: # сколько минимум ресурсов нужно запросиьт для нрашего приложения у нашего кластера
              memory: "64Mi"
              cpu: "150m" # 15% от всего нашего кластера, если ресурса требуемого нет, приложение не запустится (Pending)
            limits: # максимальный лимит, сколько может потреблять наше приложение (наш под), если выходим за этот лимит, то к8s убьет его
              memory: "150Mi"
              cpu: "250m"
          ports:
            - containerPort: 8000 # здесь говорим какой порт открыть наружу
          env:
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: NODE_ENV # название переменной которую мы создаем для нашего пода, она может отличаться по названия от переменной в configMap (но лучше делать одинаковые имена)
              valueFrom: # говорим, откуда взять значение переменной
                configMapKeyRef: # говорим брать из configMap
                  name: backend-config-map # указываем название которое задали в metadata -> name для нашего configMap
                  key: NODE_ENV # и имя переменной, которую хотим из него взять
            - name: AUTH_SERVICE_API
              valueFrom:
                configMapKeyRef:
                  optional: true # если переменная не будет прокинута, то под (приложение все равно запустится), но лучше без этого флага
                  name: backend-config-map
                  key: AUTH_SERVICE_API
            - name: USERNAME
              valueFrom:
                secretKeyRef: # говорим брать из secret
                  name: backed-secret # имя секрета, заданное при создании
                  key: USERNAME
      volumes:
        # Данный файл создается в момент запуска приложения в контейнере (в момент запуска пода), физически его там не находится. Мы просто его присоединяем (подключаем) по сути.
        - name: backend-config-map-file # имя для текущего volume
          configMap: # говорим что берем из конфиг мапа
            optional: true  # если файл с конфигами не будет найден, то под (приложение все равно запустится), но лучше без этого флага
            name: backend-config-map-file # имя конфиг мапа, которое указываем в metedata -> name при его создании

