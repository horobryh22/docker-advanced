# используем node образ для билда нашего приложения и запуска
FROM node:17-alpine as builder
# папка которую создаем внутри контейнера где будут лежать наши файлы
WORKDIR /app
# копируем файл с нашими зависимостями в корневую директорию app (аккуратно с package-lock.json файлом, если он создан при одной версии node а запускается на другой, могут быть ошибки, поэтому пока убрал)
COPY package.json  ./
# запускаем команду с установкой наших зависимостей
RUN npm install
# для фронтенд приложения переменные окружения нужно передавать перед сборкой, а не в docker-compose
ARG APP_HOST
# инициализируем нашу переменную, к которой обращаемся во фронтовой части
ENV REACT_APP_HOST=${APP_HOST}
# копируем все файлы нашего приложения и закидываем их в корень в докер образе
COPY . .
# билдим наше приложение
RUN npm run build

# дальше создаем другой контейнер, в котором будут только сбилженные файлы (без зависимостей и лишнего кода)
FROM nginx:alpine
# копируем нашу статику из builder контейнера в рабочую директорую nginx
COPY --from=builder /app/build usr/share/nginx/html
# заменяем nginx config файл на свой
COPY config/nginx.template.conf /etc/nginx/conf.d/default.conf
# открываем порт наружу, чтобы можно было постучаться в этот контейнер. используем аргументы и переменные окружения для текущего файла
ARG PORT
ENV PORT=${PORT}
EXPOSE ${PORT}
# команда внутри контейнера запускает nginx (первая часть команды перезаписывает переменную PORT внутри нашего nginx конфига)
CMD sed -i -e 's/$PORT/'"$PORT"'/g' /etc/nginx/conf.d/default.conf && nginx -g 'daemon off;'
